Spring Boot Application


@EnableAutoConfiguration: Spring Boot automatically configures your application based on the dependencies 
you have added to the project by using @EnableAutoConfiguration annotation.


 @SpringBootApplication:
 -----------------------------------------------
The entry point of the Spring Boot Application is the class contains @SpringBootApplication annotation.
- This class should have the main method to run the Spring Boot application. 
- @SpringBootApplication annotation includes Auto- Configuration, Component Scan, and Spring Boot Configuration.
- If you added @SpringBootApplication annotation to the class, you do not need to add the @EnableAutoConfiguration, @ComponentScan and @SpringBootConfiguration annotation. 
 
@SpringBootApplication =  @EnableAutoConfiguration +  @ComponentScan + @SpringBootConfiguration

Observe the following code for a better understanding

Spring boot app contains main method
App starts from main method.


import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}


@ComponentScan:
-----------------------------
Spring Boot application scans all the beans and package declarations when the application initializes. 
You need to add the @ComponentScan annotation for your class file to scan your components added in your project.

import org.springframework.boot.SpringApplication;
import org.springframework.context.annotation.ComponentScan;
@ComponentScan
public class DemoApplication {
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}



Controller Advice
The @ControllerAdvice is an annotation, to handle the exceptions globally.




Ex:


 
spring boot war file deployment:
------------------------------------------------------------
We need to extend the class SpringBootServletInitializer to support WAR file deployment. The code of Spring Boot Application class file is given below:

package com.tutorialspoint.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.support.SpringBootServletInitializer;

@SpringBootApplication
public class DemoApplication  extends SpringBootServletInitializer {
   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
      return application.sources(DemoApplication.class);
   }
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}




MICRO SERVICES/REST:
--------------------------
@RestController
@RequestMapping-> URL + HTTP METHOD + PRODUCES+ CONSUMES


@Controller is replaced with @RestController 

@RequestMapping is replaced with below annotations in future versions:'
@GetMapping
@PostMapping
@PutMapping
@DeleteMapping