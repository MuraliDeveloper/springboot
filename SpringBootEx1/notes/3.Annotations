Spring Boot Application


@ComponentScan
@SpringBootConfiguration
@EnableAutoConfiguration: 
Spring Boot automatically configures your application based on the dependencies 
you have added to the project by using @EnableAutoConfiguration annotation.

@ComponentScan
------------------------------------
By default spring scans only the current package
if we have additional bean class in diff packages then we need  to this this annotation.


Spring Boot autoconfiguration:
--------------------------------------------
To enable auto-configuration, we can use one of the @SpringBootApplication or @EnableAutoConfiguration annotations:

registers beans based on both the included jar files in the classpath and the beans defined by us

the Spring Boot autoconfiguration represents a way to automatically configure a Spring application 
based on the dependencies that are present on the classpath.

All auto-configuration logic is implemented in spring-boot-autoconfigure.jar, as shown in the following figure.

ex:
1. if the H2 database Jar is present in the classpath and we have not configured any beans related to the database manually, the Spring Boot's auto-configuration feature automatically configures it in the project.
2.Spring-based application requires a lot of configuration.
 When we use Spring MVC, we need to configure dispatcher servlet, view resolver, web jars 
 among other things
3.when we use Hibernate/ JPA, we need to configure datasource, a transaction manager, an entity manager factory among a host of other things.

Observe the console:
------------------------
We see that TransactionManagement, DispatcherServlet, EntityManagerFactory, and DataSource automatically configures,

observer Positive match  and negative match




To create a custom auto-configuration, we need to create a class annotated as @Configuration and register it.

Advanced autocinfiguration:
-----------------------------
If we want our auto-configuration class to have priority over other auto-configuration candidates, 
we can add the @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE) annotation.


If we want to include a bean only if a specified bean is present or not, we can use the @ConditionalOnBean and @ConditionalOnMissingBean annotations.

Let's also configure a transactionManager bean that will only be loaded if a bean of type JpaTransactionManager is not already defined:

@Bean
@ConditionalOnMissingBean(type = "JpaTransactionManager")
JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
    JpaTransactionManager transactionManager = new JpaTransactionManager();
    transactionManager.setEntityManagerFactory(entityManagerFactory);
    return transactionManager;
}


Disabling Auto-Configuration Classes
----------------------------------------------------------------
If we wanted to exclude the auto-configuration from being loaded, we could add the @EnableAutoConfiguration annotation with exclude or excludeName attribute to a configuration class:

@Configuration
@EnableAutoConfiguration(
  exclude={MySQLAutoconfiguration.class})
public class AutoconfigurationApplication {






 @SpringBootApplication:
 -----------------------------------------------
The entry point of the Spring Boot Application is the class contains @SpringBootApplication annotation.
- This class should have the main method to run the Spring Boot application. 
- @SpringBootApplication annotation includes Auto- Configuration, Component Scan, and Spring Boot Configuration.
- If you added @SpringBootApplication annotation to the class, you do not need to add the @EnableAutoConfiguration, @ComponentScan and @SpringBootConfiguration annotation. 
 
@SpringBootApplication =  @EnableAutoConfiguration +  @ComponentScan + @SpringBootConfiguration

Observe the following code for a better understanding

Spring boot app contains main method
App starts from main method.


import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}


@ComponentScan:
-----------------------------
Spring Boot application scans all the beans and package declarations when the application initializes. 
You need to add the @ComponentScan annotation for your class file to scan your components added in your project.

import org.springframework.boot.SpringApplication;
import org.springframework.context.annotation.ComponentScan;
@ComponentScan
public class DemoApplication {
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}



Controller Advice
The @ControllerAdvice is an annotation, to handle the exceptions globally.




Ex:


 
spring boot war file deployment:
------------------------------------------------------------
We need to extend the class SpringBootServletInitializer to support WAR file deployment. The code of Spring Boot Application class file is given below:

package com.tutorialspoint.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.support.SpringBootServletInitializer;

@SpringBootApplication
public class DemoApplication  extends SpringBootServletInitializer {
   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
      return application.sources(DemoApplication.class);
   }
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}



MICRO SERVICES/REST:
--------------------------
@RestController
@RequestMapping-> URL + HTTP METHOD + PRODUCES+ CONSUMES


@Controller is replaced with @RestController 

@RequestMapping is replaced with below annotations in future versions:'
@GetMapping
@PostMapping
@PutMapping
@DeleteMapping

